{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// 1. Pragma\npragma solidity ^0.8.7;\n// 2. Imports\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n\nerror NotOwner();\n\ncontract FundMe{\n      using PriceConverter for uint256;  //we're using it as a libirary on top of uint256 type \n    uint256 public constant MINIMUM_USD =50 * 1e18;\n\n    address[] public funders;\n    mapping (address =>uint256) addressToAmountFunded;\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress){\n      i_owner = msg.sender;\n      priceFeed= AggregatorV3Interface(priceFeedAddress) ;\n    }\n\n    function fund() public payable{\n      //How do we send ETH to this contract?\n      require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didn't send enough!\");\n      //18 decimal\n\n      funders.push(msg.sender);\n      addressToAmountFunded[msg.sender] += msg.value;\n      \n    }\n\n    function withDraw() public onlyOwner{\n      for(uint256 funderIndex=0 ; funderIndex< funders.length ; funderIndex=funderIndex+1 ){\n           address funder = funders[funderIndex];\n           addressToAmountFunded[funder] =0;\n      }\n\n      //reset an array\n      funders = new address[](0);\n\n      // actually withdraw the funds through 3 waaays\n      // trasfer\n      //payable(msg.sender).trasfer(address(this).balance);\n      //send \n      //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n     // require(sendSuccess, \"Didn't send success!\")\n      //call\n       (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n      require(callSuccess, \"Didn't call success!\");\n    }\n\n    modifier onlyOwner{\n      //require(msg.sender == i_owner, \"Sender is not owner!\");\n      if(msg.sender!= i_owner){\n        revert NotOwner();\n      }\n      _;\n      //underscore represent the rest of the code will call after this line\n    }\n\n    receive() external payable{\n      fund();\n    }\n    \n     fallback() external payable{\n      fund();\n    }\n\n}"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter{\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\r\n        //ABI\r\n        (, int256 price,,,) = priceFeed.latestRoundData();\r\n        //ETH in terms of USD\r\n        //3000.00000000\r\n        \r\n        //Casting\r\n        return uint256(price * 1e10); //1**10 = 10000000000\r\n    }\r\n\r\n    //to validate\r\n    function getVersion() internal view returns (uint256){\r\n        AggregatorV3Interface priceFeed =AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount,\r\n     AggregatorV3Interface priceFeed) internal view returns (uint256){\r\n        // we get price of ethereum\r\n        uint256 ethPrice = getPrice(priceFeed );\r\n        //\r\n        uint256 ethAmountInUSD = (ethPrice*ethAmount) / 1e18;\r\n        return ethAmountInUSD;\r\n\r\n    }\r\n}"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
