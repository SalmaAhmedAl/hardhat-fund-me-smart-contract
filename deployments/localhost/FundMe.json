{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheapWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withDraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x34c4e7bd1ba8c9aaa42d39c98bd2380efdac6b26f91595c93891548b6f551e94",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1031738",
        "logsBloom": "0x
        "blockHash": "0x505a72986adc4407f0c548030f4e5888285002da48f0750a236e8bc02062edb1",
        "transactionHash": "0x34c4e7bd1ba8c9aaa42d39c98bd2380efdac6b26f91595c93891548b6f551e94",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1031738",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "fa7628df85942d81d6e93627a6c3ab5f",
    "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Salma Ahmed Ali\",\"details\":\"This implements a price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements a price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function fund this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.7;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n *@title A contract for crowd funding\\n *@author Salma Ahmed Ali\\n *@notice This contract is to demo a sample funding contract\\n *@dev This implements a price feeds as our library\\n */\\ncontract FundMe{\\n  //Const & immutable\\n  //constant variables are actually part of the contract's byte code itself\\n  //Not in storage ..it's just a pointer to its value and doesn't take up storage slot.\\n\\n  //variables in functions don't get added to storage, get added in thier own memory data strucure and gets deleted after the function has finished running\\n  //Arrays & Mapping can take up a lot more space.\\n\\n  //Gas is calculated by this opcodes\\n  //To see how much it costs for each one\\n\\n      \\n    using PriceConverter for uint256;  //we're using it as a libirary on top of uint256 type \\n\\n    address[] private s_funders;\\n    mapping (address =>uint256) private s_addressToAmountFunded;  //getAddressToAmountFunded\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD =50 * 1e18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner{\\n      //require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n      if(msg.sender!= i_owner){\\n        revert FundMe__NotOwner();\\n      }\\n      _;\\n      //underscore represent the rest of the code will call after this line\\n    }\\n\\n    constructor(address priceFeedAddress){\\n      i_owner = msg.sender;\\n      s_priceFeed= AggregatorV3Interface(priceFeedAddress) ;\\n    }\\n\\n    receive() external payable{\\n      fund();\\n    }\\n    \\n     fallback() external payable{\\n      fund();\\n    }\\n\\n    \\n/**\\n *@notice This function fund this contract\\n *@dev This implements a price feeds as our library\\n */\\n\\n    function fund() public payable{\\n      //How do we send ETH to this contract?\\n      require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"Didn't send enough!\\\");\\n      //18 decimal\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n      \\n      \\n    }\\n\\n    function withDraw() public onlyOwner{\\n      for(uint256 funderIndex=0 ; funderIndex< s_funders.length ; funderIndex=funderIndex+1 ){\\n           address funder = s_funders[funderIndex];\\n           s_addressToAmountFunded [funder] =0;\\n      }\\n\\n      //reset an array\\n      s_funders = new address[](0);\\n\\n      // actually withdraw the funds through 3 waaays\\n      // trasfer\\n      //payable(msg.sender).trasfer(address(this).balance);\\n      //send \\n      //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n      // require(sendSuccess, \\\"Didn't send success!\\\")\\n      //call\\n\\n      // payable(msg.sender).transfer(address(this).balance);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheapWithdraw() public payable onlyOwner(){\\n      address [] memory funders = s_funders; //saved a storage value into a memory value, we can read and write from this memory var, much much cheaper and then update storage when you're done\\n      //mappings can't be in memory\\n      for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address){\\n      return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n      return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256){\\n      return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface){\\n      return s_priceFeed;\\n    }\\n}\",\"keccak256\":\"0xf1a1427b2973a83d46336fc5e5fc48c955ab9d6ee0431f4c32344a6c46d86570\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter{\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256){\\r\\n        //ABI\\r\\n        (, int256 price,,,) = priceFeed.latestRoundData();\\r\\n        //ETH in terms of USD\\r\\n        //3000.00000000\\r\\n        \\r\\n        //Casting\\r\\n        return uint256(price * 1e10); //1**10 = 10000000000\\r\\n    }\\r\\n\\r\\n    //to validate\\r\\n    function getVersion() internal view returns (uint256){\\r\\n        AggregatorV3Interface priceFeed =AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\r\\n        return priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function getConversionRate(uint256 ethAmount,\\r\\n     AggregatorV3Interface priceFeed) internal view returns (uint256){\\r\\n        // we get price of ethereum\\r\\n        uint256 ethPrice = getPrice(priceFeed );\\r\\n        //\\r\\n        uint256 ethAmountInUSD = (ethPrice*ethAmount) / 1e18;\\r\\n        return ethAmountInUSD;\\r\\n\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf9f5b0268aaa735e64c021f8368d1e034b67d15a1a904425c69a3ead5d8c0782\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012d1380380620012d18339818101604052810190620000379190620000cd565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600081519050620000c78162000138565b92915050565b600060208284031215620000e657620000e562000133565b5b6000620000f684828501620000b6565b91505092915050565b60006200010c8262000113565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014381620000ff565b81146200014f57600080fd5b50565b60805160601c61114b6200018660003960008181610344015281816105850152818161077b0152610822015261114b6000f3fe60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101215780639e87a5cd1461014c578063b60d428814610177578063d7b4750c146101815761008e565b80630343fb25146100985780630fdb1c10146100d5578063206ddccd146100ec5780636b69a592146100f65761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa3565b6102f9565b6040516100cc9190610c99565b60405180910390f35b3480156100e157600080fd5b506100ea610342565b005b6100f4610583565b005b34801561010257600080fd5b5061010b610811565b6040516101189190610c99565b60405180910390f35b34801561012d57600080fd5b5061013661081e565b6040516101439190610c23565b60405180910390f35b34801561015857600080fd5b50610161610846565b60405161016e9190610c3e565b60405180910390f35b61017f6101be565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610ad0565b610870565b6040516101b59190610c23565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b790919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c79565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028d9190610cd0565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104735760008082815481106103ec576103eb611001565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505060018161046c9190610cd0565b90506103ca565b50600067ffffffffffffffff81111561048f5761048e611030565b5b6040519080825280602002602001820160405280156104bd5781602001602082028036833780820191505090505b50600090805190602001906104d3929190610993565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104fa90610c0e565b60006040518083038185875af1925050503d8060008114610537576040519150601f19603f3d011682016040523d82523d6000602084013e61053c565b606091505b5050905080610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790610c59565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610608576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561068b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610641575b5050505050905060005b81518110156107165760008282815181106106b3576106b2611001565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061070e90610f5a565b915050610695565b50600067ffffffffffffffff81111561073257610731611030565b5b6040519080825280602002602001820160405280156107605781602001602082028036833780820191505090505b5060009080519060200190610776929190610993565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107bd90610c0e565b60006040518083038185875af1925050503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b505090508061080d57600080fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080828154811061088557610884611001565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108c3836108f3565b90506000670de0b6b3a764000085836108dc9190610e6e565b6108e69190610d26565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093c57600080fd5b505afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610afd565b5050509150506402540be4008161098b9190610d57565b915050919050565b828054828255906000526020600020908101928215610a0c579160200282015b82811115610a0b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b3565b5b509050610a199190610a1d565b5090565b5b80821115610a36576000816000905550600101610a1e565b5090565b600081359050610a49816110b9565b92915050565b600081519050610a5e816110d0565b92915050565b600081359050610a73816110e7565b92915050565b600081519050610a88816110e7565b92915050565b600081519050610a9d816110fe565b92915050565b600060208284031215610ab957610ab861105f565b5b6000610ac784828501610a3a565b91505092915050565b600060208284031215610ae657610ae561105f565b5b6000610af484828501610a64565b91505092915050565b600080600080600060a08688031215610b1957610b1861105f565b5b6000610b2788828901610a8e565b9550506020610b3888828901610a4f565b9450506040610b4988828901610a79565b9350506060610b5a88828901610a79565b9250506080610b6b88828901610a8e565b9150509295509295909350565b610b8181610ec8565b82525050565b610b9081610f24565b82525050565b6000610ba3600b83610cbf565b9150610bae82611064565b602082019050919050565b6000610bc6600083610cb4565b9150610bd18261108d565b600082019050919050565b6000610be9601383610cbf565b9150610bf482611090565b602082019050919050565b610c0881610f04565b82525050565b6000610c1982610bb9565b9150819050919050565b6000602082019050610c386000830184610b78565b92915050565b6000602082019050610c536000830184610b87565b92915050565b60006020820190508181036000830152610c7281610b96565b9050919050565b60006020820190508181036000830152610c9281610bdc565b9050919050565b6000602082019050610cae6000830184610bff565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cdb82610f04565b9150610ce683610f04565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d1b57610d1a610fa3565b5b828201905092915050565b6000610d3182610f04565b9150610d3c83610f04565b925082610d4c57610d4b610fd2565b5b828204905092915050565b6000610d6282610eda565b9150610d6d83610eda565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dac57610dab610fa3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610de957610de8610fa3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e2657610e25610fa3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6357610e62610fa3565b5b828202905092915050565b6000610e7982610f04565b9150610e8483610f04565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ebd57610ebc610fa3565b5b828202905092915050565b6000610ed382610ee4565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f2f82610f36565b9050919050565b6000610f4182610f48565b9050919050565b6000610f5382610ee4565b9050919050565b6000610f6582610f04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9857610f97610fa3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6110c281610ec8565b81146110cd57600080fd5b50565b6110d981610eda565b81146110e457600080fd5b50565b6110f081610f04565b81146110fb57600080fd5b50565b61110781610f0e565b811461111257600080fd5b5056fea264697066735822122095fc86720a4a990477a9a9d7c7ddde867500d8fd3c8276c266f674e78890888f64736f6c63430008070033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063893d20e81161004e578063893d20e8146101215780639e87a5cd1461014c578063b60d428814610177578063d7b4750c146101815761008e565b80630343fb25146100985780630fdb1c10146100d5578063206ddccd146100ec5780636b69a592146100f65761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610aa3565b6102f9565b6040516100cc9190610c99565b60405180910390f35b3480156100e157600080fd5b506100ea610342565b005b6100f4610583565b005b34801561010257600080fd5b5061010b610811565b6040516101189190610c99565b60405180910390f35b34801561012d57600080fd5b5061013661081e565b6040516101439190610c23565b60405180910390f35b34801561015857600080fd5b50610161610846565b60405161016e9190610c3e565b60405180910390f35b61017f6101be565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610ad0565b610870565b6040516101b59190610c23565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108b790919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c79565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028d9190610cd0565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c7576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104735760008082815481106103ec576103eb611001565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505060018161046c9190610cd0565b90506103ca565b50600067ffffffffffffffff81111561048f5761048e611030565b5b6040519080825280602002602001820160405280156104bd5781602001602082028036833780820191505090505b50600090805190602001906104d3929190610993565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104fa90610c0e565b60006040518083038185875af1925050503d8060008114610537576040519150601f19603f3d011682016040523d82523d6000602084013e61053c565b606091505b5050905080610580576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057790610c59565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610608576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561068b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610641575b5050505050905060005b81518110156107165760008282815181106106b3576106b2611001565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061070e90610f5a565b915050610695565b50600067ffffffffffffffff81111561073257610731611030565b5b6040519080825280602002602001820160405280156107605781602001602082028036833780820191505090505b5060009080519060200190610776929190610993565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107bd90610c0e565b60006040518083038185875af1925050503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b505090508061080d57600080fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080828154811061088557610884611001565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108c3836108f3565b90506000670de0b6b3a764000085836108dc9190610e6e565b6108e69190610d26565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561093c57600080fd5b505afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190610afd565b5050509150506402540be4008161098b9190610d57565b915050919050565b828054828255906000526020600020908101928215610a0c579160200282015b82811115610a0b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109b3565b5b509050610a199190610a1d565b5090565b5b80821115610a36576000816000905550600101610a1e565b5090565b600081359050610a49816110b9565b92915050565b600081519050610a5e816110d0565b92915050565b600081359050610a73816110e7565b92915050565b600081519050610a88816110e7565b92915050565b600081519050610a9d816110fe565b92915050565b600060208284031215610ab957610ab861105f565b5b6000610ac784828501610a3a565b91505092915050565b600060208284031215610ae657610ae561105f565b5b6000610af484828501610a64565b91505092915050565b600080600080600060a08688031215610b1957610b1861105f565b5b6000610b2788828901610a8e565b9550506020610b3888828901610a4f565b9450506040610b4988828901610a79565b9350506060610b5a88828901610a79565b9250506080610b6b88828901610a8e565b9150509295509295909350565b610b8181610ec8565b82525050565b610b9081610f24565b82525050565b6000610ba3600b83610cbf565b9150610bae82611064565b602082019050919050565b6000610bc6600083610cb4565b9150610bd18261108d565b600082019050919050565b6000610be9601383610cbf565b9150610bf482611090565b602082019050919050565b610c0881610f04565b82525050565b6000610c1982610bb9565b9150819050919050565b6000602082019050610c386000830184610b78565b92915050565b6000602082019050610c536000830184610b87565b92915050565b60006020820190508181036000830152610c7281610b96565b9050919050565b60006020820190508181036000830152610c9281610bdc565b9050919050565b6000602082019050610cae6000830184610bff565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610cdb82610f04565b9150610ce683610f04565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d1b57610d1a610fa3565b5b828201905092915050565b6000610d3182610f04565b9150610d3c83610f04565b925082610d4c57610d4b610fd2565b5b828204905092915050565b6000610d6282610eda565b9150610d6d83610eda565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dac57610dab610fa3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610de957610de8610fa3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e2657610e25610fa3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e6357610e62610fa3565b5b828202905092915050565b6000610e7982610f04565b9150610e8483610f04565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ebd57610ebc610fa3565b5b828202905092915050565b6000610ed382610ee4565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610f2f82610f36565b9050919050565b6000610f4182610f48565b9050919050565b6000610f5382610ee4565b9050919050565b6000610f6582610f04565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f9857610f97610fa3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b50565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b6110c281610ec8565b81146110cd57600080fd5b50565b6110d981610eda565b81146110e457600080fd5b50565b6110f081610f04565b81146110fb57600080fd5b50565b61110781610f0e565b811461111257600080fd5b5056fea264697066735822122095fc86720a4a990477a9a9d7c7ddde867500d8fd3c8276c266f674e78890888f64736f6c63430008070033",
    "devdoc": {
        "author": "Salma Ahmed Ali",
        "details": "This implements a price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements a price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function fund this contract"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 58,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 72,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
